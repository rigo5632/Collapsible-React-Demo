{"version":3,"sources":["components/ContentPanel.js","components/TabPanel.js","components/CommitmentsMilestones.js","App.js","serviceWorker.js","index.js"],"names":["ContentPanel","props","content","className","TabPanel","useState","tabContent","setTabContent","btnToggles","setBtnToggles","useEffect","tabData","map","show","onDisplay","tab","title","id","on","off","key","onClick","index","counter","newBtnToggle","toggle","updateTabContent","CommitmentsMilestones","tabs","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAWeA,EATM,SAACC,GAAW,IACtBC,EAAWD,EAAXC,QACP,OACI,6BACI,0BAAMC,UAAU,cAAa,gCAASD,MCoCnCE,EAvCE,SAACH,GAAW,IAAD,EACWI,mBAAS,IADpB,mBAClBC,EADkB,KACNC,EADM,OAEWF,mBAAS,IAFpB,mBAElBG,EAFkB,KAENC,EAFM,KAIxBC,qBAAU,WACND,EAAcR,EAAMU,QAAQC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,gBAC9C,CAACb,EAAMU,UAUV,OACI,yBAAKR,UAAU,OACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,cACTF,EAAMU,QAAQC,KAAI,SAAAG,GAAQ,IAChBC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,GAAIf,EAAoBa,EAApBb,QAASgB,EAAWH,EAAXG,GAAIC,EAAOJ,EAAPI,IAC/B,OACI,wBAAIC,IAAKH,EAAId,UAAU,oDACnB,4BAAQA,UAAU,MAAMkB,QAAS,YAhBpC,SAACnB,EAASoB,GAC/B,IAAIC,EAAU,EACRC,EAAehB,EAAWI,KAAI,SAAAa,GAAM,OAAIF,MAAcD,IAASG,KACrEhB,EAAce,GACdjB,EAAciB,EAAaF,GAASpB,EAAU,IAYkBwB,CAAiBxB,EAASe,KAC9D,wBAAId,UAAWK,EAAWS,GAAME,EAAMD,GAAI,gCAASF,WAO3E,yBAAKb,UAAU,SACX,kBAAC,EAAD,CAAcD,QAASI,OCqBxBqB,EAtDe,WAAO,IAAD,EACjBtB,mBAAS,CACpB,CACIW,MAAO,UACPd,QAAQ,0QAGRY,WAAW,EACXI,GAAI,eACJC,IAAK,aACLF,GAAI,GAER,CACID,MAAO,MACPd,QAAQ,0WAIRY,WAAW,EACXI,GAAI,eACJC,IAAK,aACLF,GAAI,GAER,CACID,MAAO,aACPd,QAAQ,8SAIRY,WAAW,EACXI,GAAI,eACJC,IAAK,aACLF,GAAI,GAER,CACID,MAAO,YACPd,QAAQ,wVAIRY,WAAW,EACXI,GAAI,eACJC,IAAK,aACLF,GAAI,KA1CLW,EADyB,oBA+ChC,OACI,kBAAC,WAAD,KACI,kBAAC,EAAD,CAAUjB,QAASiB,MCtChBC,MAVf,WACE,OACE,yBAAK1B,UAAU,kBACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,SCIY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bdb493f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ContentPanel = (props) => {\r\n    const {content} = props;\r\n    return ( \r\n        <div>\r\n            <span className=\"text-white\"><strong>{content}</strong></span>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default ContentPanel;","import React, {useState, useEffect} from 'react';\r\nimport ContentPanel from './ContentPanel.js';\r\n\r\nconst TabPanel = (props) => {\r\n    const[tabContent, setTabContent] = useState('');\r\n    const[btnToggles, setBtnToggles] = useState([]);\r\n    \r\n    useEffect(() =>{\r\n        setBtnToggles(props.tabData.map(show => show.onDisplay));\r\n    }, [props.tabData]);\r\n\r\n    const updateTabContent = (content, index) =>{\r\n        let counter = 0;\r\n        const newBtnToggle = btnToggles.map(toggle => counter++ === index ? !toggle : false);\r\n        setBtnToggles(newBtnToggle);\r\n        setTabContent(newBtnToggle[index] ? content : '');\r\n    }\r\n\r\n\r\n    return( \r\n        <div className='row'>\r\n            <div className='col-4'>\r\n                <ul className=\"list-group\">\r\n                    {props.tabData.map(tab => {\r\n                        const {title, id, content, on, off} = tab;\r\n                        return(\r\n                            <li key={id} className='list-group-item border border-primary bg-primary'>\r\n                                <button className='btn' onClick={() => {updateTabContent(content, id)}}>\r\n                                    <h6 className={btnToggles[id] ? off : on}><strong>{title}</strong></h6>\r\n                                </button>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className='col-8'>\r\n                <ContentPanel content={tabContent} />\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default TabPanel;","import React, {useState, Fragment} from 'react';\r\nimport TabPanel from './TabPanel.js';\r\n\r\nconst CommitmentsMilestones = () => {\r\n    const [tabs] = useState([\r\n        {\r\n            title: 'Walking',\r\n            content: `The definition of walking is related to strolling or moving with the feet.\r\n             An example of walking used as an adjective is in the phrase \"a walking tour,\" \r\n             which means a tour in which people move from point a to point b using their feet.`,\r\n            onDisplay: false,\r\n            on: 'text-warning',\r\n            off: 'text-white',\r\n            id: 0\r\n        },\r\n        {\r\n            title: 'Car',\r\n            content: `A car (or automobile) is a wheeled motor vehicle used for transportation. \r\n            Most definitions of cars say that they run primarily on roads, seat one to eight people, \r\n            have four tires, and mainly transport people rather than goods. Cars came into global use \r\n            during the 20th century, and developed economies depend on them.`,\r\n            onDisplay: false,\r\n            on: 'text-warning',\r\n            off: 'text-white',\r\n            id: 1\r\n        },\r\n        {\r\n            title: 'Motorcycle',\r\n            content: `A motorcycle, often called a motorbike, bike, or cycle, is a \r\n            two- or three-wheeled motor vehicle. Motorcycle design varies greatly \r\n            to suit a range of different purposes: long distance travel, commuting, \r\n            cruising, sport including racing, and off-road riding.`,\r\n            onDisplay: false,\r\n            on: 'text-warning',\r\n            off: 'text-white',\r\n            id: 2\r\n        },\r\n        {\r\n            title: 'Airplance',\r\n            content: `An airplane or aeroplane (informally plane) is a powered, \r\n            fixed-wing aircraft that is propelled forward by thrust from a jet engine, \r\n            propeller or rocket engine. ... Most airplanes are flown by a pilot on board \r\n            the aircraft, but some are designed to be remotely or computer-controlled such as drones.`,\r\n            onDisplay: false,\r\n            on: 'text-warning',\r\n            off: 'text-white',\r\n            id: 3\r\n        }\r\n      ]);\r\n      \r\n    return ( \r\n        <Fragment>\r\n            <TabPanel tabData={tabs} />\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default CommitmentsMilestones;","import React, {useState} from 'react';\nimport './App.css';\nimport CommitmentsMilestones from './components/CommitmentsMilestones.js'; \n\nfunction App() {\n  return (\n    <div className=\"App bg-primary\">\n      <div className=\"container\">\n        <CommitmentsMilestones />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}